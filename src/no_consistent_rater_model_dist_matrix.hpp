
// Code generated by stanc v2.29.1
#include <stan/model/model_header.hpp>
namespace no_consistent_rater_model_dist_matrix_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 80> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 27, column 2 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 28, column 2 to column 23)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 29, column 2 to column 18)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 30, column 2 to column 16)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 31, column 2 to column 22)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 32, column 2 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 33, column 2 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 34, column 2 to column 22)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 37, column 2 to column 18)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 38, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 39, column 2 to column 16)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 40, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 43, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 43, column 12 to column 13)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 43, column 2 to column 22)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 44, column 2 to column 36)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 48, column 4 to column 72)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 49, column 4 to column 30)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 47, column 20 to line 50, column 5)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 47, column 3 to line 50, column 5)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 46, column 19 to line 51, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 46, column 2 to line 51, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 52, column 16 to column 56)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 52, column 2 to column 56)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 53, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 53, column 12 to column 13)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 53, column 2 to column 51)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 54, column 2 to column 22)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 42, column 2 to line 55, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 57, column 2 to column 28)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 58, column 2 to column 30)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 59, column 2 to column 26)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 60, column 2 to column 28)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 63, column 2 to column 40)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 62, column 16 to line 66, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 62, column 2 to line 66, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 71, column 2 to column 37)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 72, column 2 to column 36)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 73, column 2 to column 27)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 74, column 2 to column 27)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 75, column 2 to column 29)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 76, column 2 to column 21)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 77, column 2 to column 27)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 78, column 2 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 81, column 2 to column 50)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 80, column 16 to line 82, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 80, column 2 to line 82, column 3)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 15, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 16, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 17, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 18, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 19, column 2 to column 17)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 20, column 8 to column 9)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 20, column 2 to column 35)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 21, column 8 to column 9)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 21, column 2 to column 35)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 22, column 8 to column 9)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 22, column 2 to column 35)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 23, column 8 to column 9)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 23, column 2 to column 26)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 24, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 24, column 12 to column 13)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 24, column 2 to column 20)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 27, column 9 to column 12)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 28, column 9 to column 12)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 29, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 30, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 37, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 38, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 39, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 40, column 9 to column 10)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 7, column 11 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 7, column 4 to column 35)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 8, column 11 to column 24)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 8, column 4 to column 32)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 9, column 4 to column 64)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 10, column 4 to column 46)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 11, column 4 to column 40)",
 " (in '/Users/henryqu/Documents/GitHub/ntep-rsm/src/no_consistent_rater_model_dist_matrix.stan', line 6, column 53 to line 12, column 3)"};

struct rsm_functor__ {
  template <typename T1__, typename T2__, typename T3__,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr>
  stan::promote_args_t<T1__, T2__, stan::value_type_t<T3__>>
  operator()(const int& y, const T1__& theta, const T2__& beta,
             const T3__& tau, std::ostream* pstream__) const;
};

template <typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr>
  stan::promote_args_t<T1__, T2__, stan::value_type_t<T3__>>
  rsm(const int& y, const T1__& theta, const T2__& beta,
      const T3__& tau_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T1__, T2__, stan::value_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& tau = stan::math::to_ref(tau_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 72;
      stan::math::validate_non_negative_index("unsummed", "rows(tau) + 1",
                                              (stan::math::rows(tau) + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> unsummed =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           (stan::math::rows(tau) + 1), DUMMY_VAR__);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("probs", "rows(tau) + 1",
                                              (stan::math::rows(tau) + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> probs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           (stan::math::rows(tau) + 1), DUMMY_VAR__);
      current_statement__ = 76;
      stan::model::assign(unsummed,
        stan::math::append_row(stan::math::rep_vector(0, 1),
          stan::math::subtract((theta - beta), tau)),
        "assigning variable unsummed");
      current_statement__ = 77;
      stan::model::assign(probs,
        stan::math::softmax(stan::math::cumulative_sum(unsummed)),
        "assigning variable probs");
      current_statement__ = 78;
      return stan::math::categorical_lpmf<false>((y + 1), probs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_col_vector_t<T3__>*>
stan::promote_args_t<T1__, T2__, stan::value_type_t<T3__>>
rsm_functor__::operator()(const int& y, const T1__& theta, const T2__& beta,
                          const T3__& tau, std::ostream* pstream__)  const
{
  return rsm(y, theta, beta, tau, pstream__);
}


class no_consistent_rater_model_dist_matrix_model final : public model_base_crtp<no_consistent_rater_model_dist_matrix_model> {

 private:
  int N;
  int I;
  int J;
  int P;
  int M;
  std::vector<int> ii;
  std::vector<int> jj;
  std::vector<int> pp;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> DIST__;
  int beta_free_1dim__;
  int tau_free_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> DIST{nullptr, 0, 0};
 
 public:
  ~no_consistent_rater_model_dist_matrix_model() { }
  
  inline std::string model_name() const final { return "no_consistent_rater_model_dist_matrix_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.1", "stancflags = "};
  }
  
  
  no_consistent_rater_model_dist_matrix_model(stan::io::var_context& context__,
                                              unsigned int random_seed__ = 0,
                                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "no_consistent_rater_model_dist_matrix_model_namespace::no_consistent_rater_model_dist_matrix_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      
      current_statement__ = 49;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      
      current_statement__ = 50;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization","P","int",
           std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 52;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 52;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("ii", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization","ii","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      ii = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 54;
      ii = context__.vals_i("ii");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "ii", ii, 1);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "ii", ii, I);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("jj", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","jj","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      jj = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 56;
      jj = context__.vals_i("jj");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 56;
      stan::math::check_less_or_equal(function__, "jj", jj, J);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("pp", "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization","pp","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      pp = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 58;
      pp = context__.vals_i("pp");
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "pp", pp, 1);
      current_statement__ = 58;
      stan::math::check_less_or_equal(function__, "pp", pp, P);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 60;
      y = context__.vals_i("y");
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("DIST", "P", P);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("DIST", "P", P);
      current_statement__ = 63;
      context__.validate_dims("data initialization","DIST","double",
           std::vector<size_t>{static_cast<size_t>(P),
            static_cast<size_t>(P)});
      DIST__ = 
        Eigen::Matrix<double, -1, -1>::Constant(P, P,
          std::numeric_limits<double>::quiet_NaN());
      new (&DIST) Eigen::Map<Eigen::Matrix<double, -1, -1>>(DIST__.data(), P, P);
        
      
      {
        std::vector<local_scalar_t__> DIST_flat__;
        current_statement__ = 63;
        DIST_flat__ = context__.vals_r("DIST");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            current_statement__ = 63;
            stan::model::assign(DIST, DIST_flat__[(pos__ - 1)],
              "assigning variable DIST", stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
            current_statement__ = 63;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 64;
      beta_free_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 64;
      beta_free_1dim__ = (I - 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("beta_free", "I - 1",
                                              beta_free_1dim__);
      current_statement__ = 65;
      tau_free_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 65;
      tau_free_1dim__ = (M - 1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("tau_free", "M - 1",
                                              tau_free_1dim__);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("entry", "J", J);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("eta", "P", P);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("theta", "N", N);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("beta", "I", I);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("tau", "M", M);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("plot", "P", P);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = beta_free_1dim__ + tau_free_1dim__ + J + P + 1 + 
      1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "no_consistent_rater_model_dist_matrix_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_free =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_free_1dim__,
           DUMMY_VAR__);
      current_statement__ = 1;
      beta_free = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    beta_free_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_free =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(tau_free_1dim__,
           DUMMY_VAR__);
      current_statement__ = 2;
      tau_free = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   tau_free_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> entry =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      entry = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 4;
      eta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(P);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma_e = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_e = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ inv_rho = DUMMY_VAR__;
      current_statement__ = 7;
      inv_rho = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 8;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(I, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> plot =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(P, DUMMY_VAR__);
      {
        current_statement__ = 13;
        stan::math::validate_non_negative_index("KERNEL", "P", P);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("KERNEL", "P", P);
        Eigen::Matrix<local_scalar_t__, -1, -1> KERNEL =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(P, P,
             DUMMY_VAR__);
        local_scalar_t__ sq_sigma_e = DUMMY_VAR__;
        current_statement__ = 16;
        sq_sigma_e = stan::math::square(sigma_e);
        current_statement__ = 22;
        for (int i = 1; i <= (P - 1); ++i) {
          current_statement__ = 20;
          for (int j = (i + 1); j <= P; ++j) {
            current_statement__ = 17;
            stan::model::assign(KERNEL,
              (stan::math::square(alpha) *
                stan::math::exp(
                  (-0.5 *
                    stan::math::square(
                      (stan::model::rvalue(DIST, "DIST",
                         stan::model::index_uni(i), stan::model::index_uni(j))
                        * inv_rho))))),
              "assigning variable KERNEL", stan::model::index_uni(i),
                                             stan::model::index_uni(j));
            current_statement__ = 18;
            stan::model::assign(KERNEL,
              stan::model::rvalue(KERNEL, "KERNEL",
                stan::model::index_uni(i), stan::model::index_uni(j)),
              "assigning variable KERNEL", stan::model::index_uni(j),
                                             stan::model::index_uni(i));
          }
        }
        current_statement__ = 24;
        for (int i = 1; i <= P; ++i) {
          current_statement__ = 23;
          stan::model::assign(KERNEL,
            (stan::math::square(alpha) + sq_sigma_e),
            "assigning variable KERNEL", stan::model::index_uni(i),
                                           stan::model::index_uni(i));
        }
        current_statement__ = 25;
        stan::math::validate_non_negative_index("L_KERN", "P", P);
        current_statement__ = 26;
        stan::math::validate_non_negative_index("L_KERN", "P", P);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_KERN =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(P, P,
             DUMMY_VAR__);
        current_statement__ = 27;
        stan::model::assign(L_KERN, stan::math::cholesky_decompose(KERNEL),
          "assigning variable L_KERN");
        current_statement__ = 28;
        stan::model::assign(plot, stan::math::multiply(L_KERN, eta),
          "assigning variable plot");
      }
      current_statement__ = 30;
      stan::model::assign(beta, beta_free,
        "assigning variable beta", stan::model::index_min_max(1, (I - 1)));
      current_statement__ = 31;
      stan::model::assign(beta, (-1 * stan::math::sum(beta_free)),
        "assigning variable beta", stan::model::index_uni(I));
      current_statement__ = 32;
      stan::model::assign(tau, tau_free,
        "assigning variable tau", stan::model::index_min_max(1, (M - 1)));
      current_statement__ = 33;
      stan::model::assign(tau, (-1 * stan::math::sum(tau_free)),
        "assigning variable tau", stan::model::index_uni(M));
      current_statement__ = 36;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        stan::model::assign(theta,
          (stan::model::rvalue(entry, "entry",
             stan::model::index_uni(stan::model::rvalue(jj, "jj",
                                      stan::model::index_uni(n)))) +
            stan::model::rvalue(plot, "plot",
              stan::model::index_uni(stan::model::rvalue(pp, "pp",
                                       stan::model::index_uni(n))))),
          "assigning variable theta", stan::model::index_uni(n));
      }
      {
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<false>(beta, 0, 2));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<false>(tau, 0, 2));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(entry, 0, sigma));
        current_statement__ = 40;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma, 3, 0, 1));
        current_statement__ = 41;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_e, 3, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(alpha, 3, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(inv_rho, 5, 5));
        current_statement__ = 47;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 45;
          lp_accum__.add(
            rsm(stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(theta, "theta", stan::model::index_uni(n)),
              stan::model::rvalue(beta, "beta",
                stan::model::index_uni(stan::model::rvalue(ii, "ii",
                                         stan::model::index_uni(n)))),
              tau, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "no_consistent_rater_model_dist_matrix_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> beta_free =
         Eigen::Matrix<double, -1, 1>::Constant(beta_free_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_free = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    beta_free_1dim__);
      Eigen::Matrix<double, -1, 1> tau_free =
         Eigen::Matrix<double, -1, 1>::Constant(tau_free_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      tau_free = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   tau_free_1dim__);
      Eigen::Matrix<double, -1, 1> entry =
         Eigen::Matrix<double, -1, 1>::Constant(J,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      entry = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      Eigen::Matrix<double, -1, 1> eta =
         Eigen::Matrix<double, -1, 1>::Constant(P,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      eta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(P);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma_e = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma_e = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double inv_rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      inv_rho = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> theta =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(I,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> tau =
         Eigen::Matrix<double, -1, 1>::Constant(M,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> plot =
         Eigen::Matrix<double, -1, 1>::Constant(P,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_free);
      out__.write(tau_free);
      out__.write(entry);
      out__.write(eta);
      out__.write(sigma);
      out__.write(sigma_e);
      out__.write(inv_rho);
      out__.write(alpha);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      {
        current_statement__ = 13;
        stan::math::validate_non_negative_index("KERNEL", "P", P);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("KERNEL", "P", P);
        Eigen::Matrix<double, -1, -1> KERNEL =
           Eigen::Matrix<double, -1, -1>::Constant(P, P,
             std::numeric_limits<double>::quiet_NaN());
        double sq_sigma_e = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 16;
        sq_sigma_e = stan::math::square(sigma_e);
        current_statement__ = 22;
        for (int i = 1; i <= (P - 1); ++i) {
          current_statement__ = 20;
          for (int j = (i + 1); j <= P; ++j) {
            current_statement__ = 17;
            stan::model::assign(KERNEL,
              (stan::math::square(alpha) *
                stan::math::exp(
                  (-0.5 *
                    stan::math::square(
                      (stan::model::rvalue(DIST, "DIST",
                         stan::model::index_uni(i), stan::model::index_uni(j))
                        * inv_rho))))),
              "assigning variable KERNEL", stan::model::index_uni(i),
                                             stan::model::index_uni(j));
            current_statement__ = 18;
            stan::model::assign(KERNEL,
              stan::model::rvalue(KERNEL, "KERNEL",
                stan::model::index_uni(i), stan::model::index_uni(j)),
              "assigning variable KERNEL", stan::model::index_uni(j),
                                             stan::model::index_uni(i));
          }
        }
        current_statement__ = 24;
        for (int i = 1; i <= P; ++i) {
          current_statement__ = 23;
          stan::model::assign(KERNEL,
            (stan::math::square(alpha) + sq_sigma_e),
            "assigning variable KERNEL", stan::model::index_uni(i),
                                           stan::model::index_uni(i));
        }
        current_statement__ = 25;
        stan::math::validate_non_negative_index("L_KERN", "P", P);
        current_statement__ = 26;
        stan::math::validate_non_negative_index("L_KERN", "P", P);
        Eigen::Matrix<double, -1, -1> L_KERN =
           Eigen::Matrix<double, -1, -1>::Constant(P, P,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::model::assign(L_KERN, stan::math::cholesky_decompose(KERNEL),
          "assigning variable L_KERN");
        current_statement__ = 28;
        stan::model::assign(plot, stan::math::multiply(L_KERN, eta),
          "assigning variable plot");
      }
      current_statement__ = 30;
      stan::model::assign(beta, beta_free,
        "assigning variable beta", stan::model::index_min_max(1, (I - 1)));
      current_statement__ = 31;
      stan::model::assign(beta, (-1 * stan::math::sum(beta_free)),
        "assigning variable beta", stan::model::index_uni(I));
      current_statement__ = 32;
      stan::model::assign(tau, tau_free,
        "assigning variable tau", stan::model::index_min_max(1, (M - 1)));
      current_statement__ = 33;
      stan::model::assign(tau, (-1 * stan::math::sum(tau_free)),
        "assigning variable tau", stan::model::index_uni(M));
      current_statement__ = 36;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        stan::model::assign(theta,
          (stan::model::rvalue(entry, "entry",
             stan::model::index_uni(stan::model::rvalue(jj, "jj",
                                      stan::model::index_uni(n)))) +
            stan::model::rvalue(plot, "plot",
              stan::model::index_uni(stan::model::rvalue(pp, "pp",
                                       stan::model::index_uni(n))))),
          "assigning variable theta", stan::model::index_uni(n));
      }
      if (emit_transformed_parameters__) {
        out__.write(theta);
        out__.write(beta);
        out__.write(tau);
        out__.write(plot);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_free =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_free_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= beta_free_1dim__; ++sym1__) {
        stan::model::assign(beta_free, in__.read<local_scalar_t__>(),
          "assigning variable beta_free", stan::model::index_uni(sym1__));
      }
      out__.write(beta_free);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_free =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(tau_free_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= tau_free_1dim__; ++sym1__) {
        stan::model::assign(tau_free, in__.read<local_scalar_t__>(),
          "assigning variable tau_free", stan::model::index_uni(sym1__));
      }
      out__.write(tau_free);
      Eigen::Matrix<local_scalar_t__, -1, 1> entry =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(J, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        stan::model::assign(entry, in__.read<local_scalar_t__>(),
          "assigning variable entry", stan::model::index_uni(sym1__));
      }
      out__.write(entry);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(P, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        stan::model::assign(eta, in__.read<local_scalar_t__>(),
          "assigning variable eta", stan::model::index_uni(sym1__));
      }
      out__.write(eta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ sigma_e = DUMMY_VAR__;
      sigma_e = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_e);
      local_scalar_t__ inv_rho = DUMMY_VAR__;
      inv_rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, inv_rho);
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta_free", "tau_free", "entry",
      "eta", "sigma", "sigma_e", "inv_rho", "alpha", "theta", "beta", "tau",
      "plot"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(beta_free_1dim__)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(tau_free_1dim__)},
      std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(P)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(I)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(P)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_free_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_free" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= tau_free_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_free" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "entry" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_e");
    param_names__.emplace_back(std::string() + "inv_rho");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "plot" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_free_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_free" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= tau_free_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_free" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "entry" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_e");
    param_names__.emplace_back(std::string() + "inv_rho");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "plot" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"tau_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"entry\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"plot\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"tau_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"entry\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"plot\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((beta_free_1dim__ + tau_free_1dim__) + J) + P) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((N + I) + M) + P);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((beta_free_1dim__ + tau_free_1dim__) + J) + P) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((N + I) + M) + P);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 8> names__{"beta_free", "tau_free",
      "entry", "eta", "sigma", "sigma_e", "inv_rho", "alpha"};
      const std::array<Eigen::Index, 8> constrain_param_sizes__{beta_free_1dim__
       , tau_free_1dim__, J, P, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = no_consistent_rater_model_dist_matrix_model_namespace::no_consistent_rater_model_dist_matrix_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return no_consistent_rater_model_dist_matrix_model_namespace::profiles__;
}

#endif


